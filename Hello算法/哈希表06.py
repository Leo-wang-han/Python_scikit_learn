#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@Date: 2024/6/28 0028
@FILE: 哈希表06.py
@Author: Leo
"""

"""
6.1哈希表（hash table）
又称散列表，建立键key与值value之间的映射，实现高效的元素查询
6.1.1.存储位置
1.1通过某种哈希算法hash()计算得到哈希值
1.2将哈希值对桶数量（数组长度）capacity取模，从而获取该key对应的数组索引index
index = hash(key) % capacity

6.1.2哈希冲突与扩容
多个输入对应同一输出
扩容：增大capacity
负载因子:哈希表的元素数量/桶数量，用于衡量哈希冲突的严重程度，作为哈希表扩容的触发条件
"""

"""
6.2哈希冲突
通常情况下哈希函数的输入空间远大于输出空间，因此理论上哈希冲突时不可避免的

6.2.1哈希冲突策略（链式地址，开放寻址）
2.1改良哈希表数据结构，似的哈希表可以在出现哈希冲突时正常工作
2.2仅在必要时，即哈希冲突比较严重时，才执行扩容操作

6.2.2链式地址
将单个元素转换为链表，将键值对作为链表的节点，将所有发生冲突的键值对都存储在同意链表中
占用空间大，查询效率低

6.2.3开放寻址
不引入额外的数据结构，而是通过“多次探测”来处理哈希冲突
线性探测、平方探测、多次哈希
"""

"""
6.3哈希算法
链式寻址和开放寻址只能保证发生哈希冲突时正常工作，而无法减少哈希冲突的发生，
键值对的分布情况由哈希函数决定；capacity固定时，哈希算法hash()决定了输出值

3.1哈希算法目标
确定性、效率高、均匀分布、密码存储、数据完整性检查（发送方和接收方哈希值匹配）、单向性、抗碰撞性、雪崩效应

3.2哈希算法的设计
加法哈希：对输入的每个字符的 ASCII 码进行相加，将得到的总和作为哈希值。
乘法哈希：利用乘法的不相关性，每轮乘以一个常数，将各个字符的 ASCII 码累积到哈希值中。
异或哈希：将输入数据的每个元素通过异或操作累积到一个哈希值中。
旋转哈希：将每个字符的 ASCII 码累积到一个哈希值中，每次累积之前都会对哈希值进行旋转操作

对最大质数1000000007取模，确保哈希值在合适范围均匀分布

3.3常见哈希算法
MD5:安全低，数据完整性检查
SHA-1系列：弃用
SHA-2系列：安全高，加密货币交易验证、数字签名等
SHA-3系列：安全高，可代替SHA-2

3.4哈希结构的哈希值
整数和布尔量的哈希值就是其本身。
浮点数和字符串的哈希值计算较为复杂，有兴趣的读者请自行学习。
元组的哈希值是对其中每一个元素进行哈希，然后将这些哈希值组合起来，得到单一的哈希值。
对象的哈希值基于其内存地址生成。通过重写对象的哈希方法，可实现基于内容生成哈希值。
"""
num = 3
hash_num = hash(num)
print("数字：",hash_num)

bol1 = True
bol2 = False
hash_bol1 = hash(bol1)
hash_bol2 = hash(bol1)
print("布尔：",bol1,bol2,sep="\n")

dec = 3.14159
hash_dec = hash(dec)
print("小数：",hash_dec)

str = "hash 算法"
hash_str = hash(str)
print("字符串：",hash_str)

tup = (10086,"哈希")
hash_tup = hash(tup)
print("元组：",hash_tup)


obj = [0,1,2][0]
hash_obj = hash(obj)
print("对象：",hash_obj)

# 在不同的控制台运行程序时，输出的哈希值不同，因为Python解释器在每次启东动时，
# 都会为字符串哈希函数加入一个盐(salt)值,这样可以有效防止HashDos攻击，提高哈希算法的安全性






























